{
  
    
        "post0": {
            "title": "Title",
            "content": "# This Python 3 environment comes with many helpful analytics libraries installed # It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python # For example, here&#39;s several helpful packages to load in import numpy as np # linear algebra import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv) # Input data files are available in the &quot;../input/&quot; directory. # For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory import os import altair as alt alt.renderers.enable(&#39;notebook&#39;) print(os.listdir(&quot;../input&quot;)) from IPython.display import HTML # The below is great for working but if you publish it, no charts show up. # The workaround in the next cell deals with this. #alt.renderers.enable(&#39;notebook&#39;) HTML(&quot;This code block contains import statements and setup.&quot;) # Any results you write to the current directory are saved as output. . [] . This code block contains import statements and setup. ## Dont worry about the code in this block. This is just the setup for showing Altair graphs in Kaggle Notebooks from altair.vega import v3 import json from IPython.display import HTML vega_url = &#39;https://cdn.jsdelivr.net/npm/vega@&#39; + v3.SCHEMA_VERSION vega_lib_url = &#39;https://cdn.jsdelivr.net/npm/vega-lib&#39; vega_lite_url = &#39;https://cdn.jsdelivr.net/npm/vega-lite@&#39; + alt.SCHEMA_VERSION vega_embed_url = &#39;https://cdn.jsdelivr.net/npm/vega-embed@3&#39; noext = &quot;?noext&quot; paths = { &#39;vega&#39;: vega_url + noext, &#39;vega-lib&#39;: vega_lib_url + noext, &#39;vega-lite&#39;: vega_lite_url + noext, &#39;vega-embed&#39;: vega_embed_url + noext } workaround = &quot;&quot;&quot; requirejs.config({{ baseUrl: &#39;https://cdn.jsdelivr.net/npm/&#39;, paths: {} }}); &quot;&quot;&quot; def add_autoincrement(render_func): # Keep track of unique &lt;div/&gt; IDs cache = {} def wrapped(chart, id=&quot;vega-chart&quot;, autoincrement=True): if autoincrement: if id in cache: counter = 1 + cache[id] cache[id] = counter else: cache[id] = 0 actual_id = id if cache[id] == 0 else id + &#39;-&#39; + str(cache[id]) else: if id not in cache: cache[id] = 0 actual_id = id return render_func(chart, id=actual_id) # Cache will stay outside and return wrapped @add_autoincrement def render(chart, id=&quot;vega-chart&quot;): chart_str = &quot;&quot;&quot; &lt;div id=&quot;{id}&quot;&gt;&lt;/div&gt;&lt;script&gt; require([&quot;vega-embed&quot;], function(vg_embed) {{ const spec = {chart}; vg_embed(&quot;#{id}&quot;, spec, {{defaultStyle: true}}).catch(console.warn); console.log(&quot;anything?&quot;); }}); console.log(&quot;really...anything?&quot;); &lt;/script&gt; &quot;&quot;&quot; return HTML( chart_str.format( id=id, chart=json.dumps(chart) if isinstance(chart, dict) else chart.to_json(indent=None) ) ) HTML(&quot;&quot;.join(( &quot;&lt;script&gt;&quot;, workaround.format(json.dumps(paths)), &quot;&lt;/script&gt;&quot;, &quot;This code block sets up embedded rendering in HTML output and&lt;br/&gt;&quot;, &quot;provides the function `render(chart, id=&#39;vega-chart&#39;)` for use below.&quot; ))) . This code block sets up embedded rendering in HTML output andprovides the function `render(chart, id=&#39;vega-chart&#39;)` for use below. #!pip install fbprophet . Getting the data . from fbprophet import Prophet !mkdir -p dataset !wget -c -b http://www-personal.umich.edu/~mejn/cp/data/sunspots.txt -P dataset data = np.loadtxt(&quot;dataset/sunspots.txt&quot;, float) . Continuing in background, pid 48. Output will be written to ‘wget-log’. . !ls dataset/ . sunspots.txt . Converting data to Pandas dataframe . # View the data as a table data_as_frame = pd.DataFrame(data, columns=[&#39;Months&#39;, &#39;SunSpots&#39;]) data_as_frame.tail(10) . Months SunSpots . 2257 2257.0 | 128.5 | . 2258 2258.0 | 83.9 | . 2259 2259.0 | 109.3 | . 2260 2260.0 | 116.7 | . 2261 2261.0 | 130.3 | . 2262 2262.0 | 145.1 | . 2263 2263.0 | 137.7 | . 2264 2264.0 | 100.7 | . 2265 2265.0 | 124.9 | . 2266 2266.0 | 74.4 | . data_as_frame[&#39;ds&#39;]=data_as_frame[&#39;Months&#39;].astype(int) . data_as_frame.head() . Months SunSpots ds . 0 0.0 | 58.0 | 0 | . 1 1.0 | 62.6 | 1 | . 2 2.0 | 70.0 | 2 | . 3 3.0 | 55.7 | 3 | . 4 4.0 | 85.0 | 4 | . Converting the months column in format acceptable for Prophet, starting from 1749 . data_as_frame[&#39;time_stamp&#39;]=data_as_frame.apply(lambda x:(pd.Timestamp(&#39;1749-01-01&#39;)+pd.DateOffset(months = int(x[&#39;ds&#39;]))),axis=1) . #Cleaning the df, we only need two columns date time and the data clean_df=data_as_frame.drop([&#39;Months&#39;,&#39;ds&#39;],axis=1) . clean_df.head() . SunSpots time_stamp . 0 58.0 | 1749-01-01 | . 1 62.6 | 1749-02-01 | . 2 70.0 | 1749-03-01 | . 3 55.7 | 1749-04-01 | . 4 85.0 | 1749-05-01 | . Lets view the data in graphical format . render(alt.Chart(clean_df).mark_line(size=15, opacity=0.8, color = &#39;Orange&#39;).encode( x=&#39;yearmonthdate(time_stamp):T&#39;, y=alt.Y(&#39;SunSpots&#39;, title=&#39;Sunspots&#39;), tooltip=[&#39;yearmonthdate(time_stamp)&#39;, &#39;SunSpots&#39;] ).interactive().properties(width=900, height=450,title=&#39;Sunspots based on Months&#39;) .configure_title(fontSize=20)) . Preparing data for modelling in Prophet . ## Prophet requires two columns, one is ds (the date time) and y (variable to be forecasted) clean_df.columns = [&#39;y&#39;, &#39;ds&#39;] . Lets Predict . def fit_predict_model(dataframe, interval_width = 0.99, changepoint_range = 0.8): m = Prophet(daily_seasonality = False, yearly_seasonality = False, weekly_seasonality = False, seasonality_mode = &#39;multiplicative&#39;, interval_width = interval_width, changepoint_range = changepoint_range) m = m.fit(dataframe) forecast = m.predict(dataframe) forecast[&#39;fact&#39;] = dataframe[&#39;y&#39;].reset_index(drop = True) print(&#39;Displaying Prophet plot&#39;) fig1 = m.plot(forecast) return forecast pred = fit_predict_model(clean_df) . Detecting Anomalies: . The light blue boundaries in the above graph are yhat_upper and yhat_lower. | If y value is greater than yhat_upper and less than yhat lower then it is an anomaly. | Also getting the importance of that anomaly based on its distance from yhat_upper and yhat_lower. | . def detect_anomalies(forecast): forecasted = forecast[[&#39;ds&#39;,&#39;trend&#39;, &#39;yhat&#39;, &#39;yhat_lower&#39;, &#39;yhat_upper&#39;, &#39;fact&#39;]].copy() #forecast[&#39;fact&#39;] = df[&#39;y&#39;] forecasted[&#39;anomaly&#39;] = 0 forecasted.loc[forecasted[&#39;fact&#39;] &gt; forecasted[&#39;yhat_upper&#39;], &#39;anomaly&#39;] = 1 forecasted.loc[forecasted[&#39;fact&#39;] &lt; forecasted[&#39;yhat_lower&#39;], &#39;anomaly&#39;] = -1 #anomaly importances forecasted[&#39;importance&#39;] = 0 forecasted.loc[forecasted[&#39;anomaly&#39;] ==1, &#39;importance&#39;] = (forecasted[&#39;fact&#39;] - forecasted[&#39;yhat_upper&#39;])/forecast[&#39;fact&#39;] forecasted.loc[forecasted[&#39;anomaly&#39;] ==-1, &#39;importance&#39;] = (forecasted[&#39;yhat_lower&#39;] - forecasted[&#39;fact&#39;])/forecast[&#39;fact&#39;] return forecasted pred = detect_anomalies(pred) . pred.head() . Plotting the anomalies for a better view . def plot_anomalies(forecasted): interval = alt.Chart(forecasted).mark_area(interpolate=&quot;basis&quot;, color = &#39;#7FC97F&#39;).encode( x=alt.X(&#39;ds:T&#39;, title =&#39;date&#39;), y=&#39;yhat_upper&#39;, y2=&#39;yhat_lower&#39;, tooltip=[&#39;yearmonthdate(ds)&#39;, &#39;fact&#39;, &#39;yhat_lower&#39;, &#39;yhat_upper&#39;] ).interactive().properties( title=&#39;Anomaly Detection&#39; ) fact = alt.Chart(forecasted[forecasted.anomaly==0]).mark_circle(size=15, opacity=0.7, color = &#39;Black&#39;).encode( x=&#39;ds:T&#39;, y=alt.Y(&#39;fact&#39;, title=&#39;Sunspots&#39;), tooltip=[&#39;yearmonthdate(ds)&#39;, &#39;fact&#39;, &#39;yhat_lower&#39;, &#39;yhat_upper&#39;] ).interactive() anomalies = alt.Chart(forecasted[forecasted.anomaly!=0]).mark_circle(size=30, color = &#39;Red&#39;).encode( x=&#39;ds:T&#39;, y=alt.Y(&#39;fact&#39;, title=&#39;Sunspots&#39;), tooltip=[&#39;yearmonthdate(ds)&#39;, &#39;fact&#39;, &#39;yhat_lower&#39;, &#39;yhat_upper&#39;], size = alt.Size( &#39;importance&#39;, legend=None) ).interactive() return render(alt.layer(interval, fact, anomalies) .properties(width=870, height=450) .configure_title(fontSize=20)) plot_anomalies(pred) . References: . http://www-personal.umich.edu/~mejn/cp/programs.html | https://towardsdatascience.com/anomaly-detection-time-series-4c661f6f165f | https://github.com/altair-viz/altair/issues/1270 | .",
            "url": "https://riyaj-shaikh.github.io/TestAI/2020/04/03/Anomaly-detection-using-Facebook's-Prophet.html",
            "relUrl": "/2020/04/03/Anomaly-detection-using-Facebook's-Prophet.html",
            "date": " • Apr 3, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://riyaj-shaikh.github.io/TestAI/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://riyaj-shaikh.github.io/TestAI/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://riyaj-shaikh.github.io/TestAI/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}